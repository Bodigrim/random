name: random-CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

defaults: { run: { shell: bash } }

jobs:
  build-cabal:
    name: CI-cabal
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      id: setup-haskell-cabal
      with:
        ghc-version: 'latest'
    - name: Update cabal package database
      run: cabal update
    - uses: actions/cache@v2
      name: Cache cabal stuff
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}
    - name: Build and test
      run: |
        cabal sdist -z -o .
        cabal get random-*.tar.gz
        cd random-*/
        cabal test all
  build-stack:
    name: CI-stack
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        resolver: [nightly, lts-16, lts-14, lts-12, lts-11, lts-9, lts-6]
        os: [ubuntu-latest]
        include:
          - resolver: lts-6
            ghc: 7.10.3
            stack-yaml: stack-really-old.yaml
          - resolver: lts-9
            ghc: 8.0.2
            stack-yaml: stack-really-old.yaml
          - resolver: lts-11
            ghc: 8.2.2
            stack-yaml: stack-old.yaml
          - resolver: lts-12
            ghc: 8.4.4
            stack-yaml: stack-old.yaml
          - resolver: lts-14
            stack-yaml: stack-coveralls.yaml
          - resolver: lts-16
            ghc: 8.8.4
            stack-yaml: stack.yaml
          - resolver: nightly
            stack-yaml: stack-nightly.yaml
          # Latest stable for MacOS: ghc-8.8.4
          - resolver: lts-16
            os: macos-latest
          # Latest stable for Windows: ghc-8.6.4
          - resolver: lts-14
            os: windows-latest
            stack-yaml: stack-coveralls.yaml
    env:
      STACK_YAML: stack.yaml
      STACK_ARGS: '--resolver ${{ matrix.resolver }}'
      cache-version: v2 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2

    - name: Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    # Executable files somehow become incompatible after restoring on MacOS from a
    # previous build, so it needs to be cleaned up. This is very inconvenient and will
    # need to be fixed.
    - name: MacOS workaround for failure due to setup-exe-cache
      if: steps.cache.outputs.cache-hit == 'true' && matrix.os == 'macos-latest'
      run: |
        rm -r ~/.stack/setup-exe-cache
        rm -r .stack-work
    - name: Windows Cache
      id: cache-windows
      uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: |
          ~/AppData/Local/Programs/stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}

    # For ubuntu we can use fast ppa installation that also reduce cache size drastically
    - name: Ubuntu install GHC
      if: matrix.ghc != '' && matrix.os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository ppa:hvr/ghc -y
        sudo apt-get update
        sudo apt-get install ghc-${{ matrix.ghc }}
    - name: Install Stack and GHC
      run: |
        set -ex
        curl -sSL https://get.haskellstack.org/ | sh -s - -f
        curl -sSL https://gist.githubusercontent.com/lehins/fd36a8cc8bf853173437b17f6b6426ad/raw/4702d0252731ad8b21317375e917124c590819ce/git-modtime.hs -o git-modtime.hs
        [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        # git-modtime.hs updates modification time of files to the latest commit time that
        # a file was modified in. This ensures that stack does not rebuild unchanged
        # files. More info in this SO answer:
        # https://stackoverflow.com/questions/60906336/stack-haskell-build-cache-of-source-files-with-github-actions/61178945#61178945
        stack --resolver ${{ matrix.resolver }} runghc git-modtime.hs
    - name: Tests
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        if [ "${{ matrix.os }}.${{ matrix.resolver }}" == "ubuntu-latest.lts-14" ] && [ -n "${COVERALLS_TOKEN}" ]; then
          stack test random:spec random:legacy-test --coverage --haddock --no-haddock-deps
          stack hpc report --all
          curl -L https://github.com/lehins/stack-hpc-coveralls/releases/download/v0.0.6.0/shc.tar.gz | tar xz shc
          ./shc --repo-token="$COVERALLS_TOKEN" --partial-coverage --fetch-coverage combined custom
        else
          stack --resolver ${{ matrix.resolver }} test --bench --no-run-benchmarks --haddock --no-haddock-deps
        fi
